{
	"name": "Star",
	"scopeName": "source.star",
	"fileTypes": ["star"],
	"patterns": [
		{
			"include": "#decls"
		}
	],
	"repository": {
		"types": {
			"patterns": [
				{
					"match": "\\b[A-Z][\\w']*(?:(?<=')|\\b)",
					"name": "entity.name.type.star"
				}
			]
		},
		"func-literal": {
			"begin": "(\\{)(\\|)([^|]*)(\\|)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.closure.begin.star"
				},
				"2": {
					"name": "punctuation.section.scope.begin.star"
				},
				"3": {
					"patterns": [
						{
							"match": "\\b(?:[a-z_][\\w']*)(?!\\s*[\\[{}\\]):])",
							"name": "variable.parameter.star"
						},
						{
							"include": "#expressions"
						}
					]
				},
				"4": {
					"name": "punctuation.section.scope.end.star"
				}
			},
			"end": "\\}",
			"endCaptures": [
				{
					"name": "punctuation.section.closure.end.star"
				}
			],
			"patterns": [
				{
					"include": "#expressions"
				}
			]
		},
		"code-block": {
			"begin": "#?\\{",
			"beginCaptures": [
				{
					"name": "punctuation.section.scope.begin.star"
				}
			],
			"end": "\\}",
			"endCaptures": [
				{
					"name": "punctuation.section.scope.end.star"
				}
			],
			"patterns": [
				{
					"include": "#expressions"
				}
			]
		},
		"decl-block": {
			"begin": "\\{",
			"beginCaptures": [
				{
					"name": "punctuation.section.scope.begin.star"
				}
			],
			"end": "\\}",
			"endCaptures": [
				{
					"name": "punctuation.section.scope.end.star"
				}
			],
			"patterns": [
				{
					"include": "#decls"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": ";\\[",
					"beginCaptures": [
						{
							"name": "punctuation.definition.comment.begin.star"
						}
					],
					"end": "\\]",
					"endCaptures": [
						{
							"name": "punctuation.definition.comment.end.star"
						}
					],
					"name": "comment.block.star",
					"patterns": [
						{
							"include": "#nested"
						}
					]
				},
				{
					"begin": ";=>",
					"beginCaptures": [
						{
							"name": "punctuation.definition.comment.star"
						}
					],
					"end": "$",
					"name": "comment.line.result.documentation.star"
				},
				{
					"begin": ";(?:--|==|@@)",
					"beginCaptures": [
						{
							"name": "punctuation.definition.comment.star"
						}
					],
					"end": "$",
					"name": "comment.line.documentation.star"
				},
				{
					"begin": ";(?!\\[)",
					"beginCaptures": [
						{
							"name": "punctuation.definition.comment.star"
						}
					],
					"end": "$",
					"name": "comment.line.star"
				}
			],
			"repository": {
				"nested": {
					"begin": "\\[",
					"end": "\\]",
					"patterns": [
						{
							"include": "#nested"
						}
					]
				}
			}
		},
		"expressions": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#func-literal"
				},
				{
					"include": "#code-block"
				},
				{
					"include": "#closure-parameter"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#types"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#method-call"
				},
				{
					"include": "#parenthesized-expression"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#hash-literal"
				},
				{
					"include": "#member-reference"
				},
				{
					"match": "\\b_\\b(?!')",
					"name": "constant.language.discard-value.star"
				},
				{
					"match": "\\b(?<![\\w']:)[a-z_][\\w']*(?!:)(?:(?<=')|\\b)",
					"name": "identifier"
				}
			],
			"repository": {
				"closure-parameter": {
					"match": "\\$\\.*\\d+",
					"name": "constant.language.closure-parameter.star"
				},
				"multi-method-call": {
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "\\b([a-z_][\\w']*)(:)",
							"beginCaptures": {
								"1": {
									"name": "entity.name.function.label.star"
								},
								"2": {
									"name": "punctuation.separator.label.star"
								}
							},
							"end": "(?=[,\\s\\]]|[a-z_][\\w']*:|:[a-z_])",
							"patterns": [
								{
									"include": "#expressions"
								}
							]
						},
						{
							"match": "(:)([a-z_][\\w']*)(?!:)",
							"captures": {
								"1": {
									"name": "punctuation.separator.label.star"
								},
								"2": {
									"name": "entity.name.function.label.star"
								}
							}
						},
						{
							"begin": "(?![,\\s\\]]|[a-z_][\\w']*:|:[a-z_])(?=\\S)",
							"end": "(?=[,\\s\\]]|[a-z_][\\w']*:|:[a-z_])",
							"patterns": [
								{
									"include": "#expressions"
								}
							]
						}
					]
				},
				"method-call": {
					"begin": "(?<![#@])\\[",
					"beginCaptures": [
						{
							"name": "punctuation.definition.arguments.begin.star"
						}
					],
					"end": "\\]",
					"endCaptures": [
						{
							"name": "punctuation.definition.arguments.end.star"
						}
					],
					"patterns": [
						{
							"begin": "(?=[a-z_][\\w']*:|:[a-z_])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#multi-method-call"
								}
							]
						},
						{
							"begin": "\\b(?:[a-z][\\w']*|_[\\w']+)(?=\\s*\\])",
							"beginCaptures": [
								{
									"name": "entity.name.function.star"
								}
							],
							"end": "(?=\\])"
						},
						{
							"include": "#expressions"
						}
					]
				},
				"member-reference": {
					"patterns": [
						{
							"name": "variable.other.star",
							"match": "(?<!\\.{3})(?<=\\.)([a-z_][\\w']*)(?:(?<=')|\\b)"
						}
					]
				},
				"parenthesized-expression": {
					"begin": "(?<![#@])\\(",
					"beginCaptures": [
						{
							"name": "punctuation.section.paren.begin.star"
						}
					],
					"end": "\\)",
					"endCaptures": [
						{
							"name": "punctuation.section.paren.end.star"
						}
					],
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				},
				"array-literal": {
					"begin": "#\\[",
					"beginCaptures": [
						{
							"name": "punctuation.section.array.begin.star"
						}
					],
					"end": "\\]",
					"endCaptures": [
						{
							"name": "punctuation.section.array.end.star"
						}
					],
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				},
				"hash-literal": {
					"begin": "#\\(",
					"beginCaptures": [
						{
							"name": "punctuation.section.hash.begin.star"
						}
					],
					"end": "\\)",
					"endCaptures": [
						{
							"name": "punctuation.section.hash.end.star"
						}
					],
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				}
			}
		},
		"keywords": {
			"patterns": [
				{
					"match": "(?<!\\.)\\b(?:if|orif|else|case|match|at)\\b(?!')",
					"name": "keyword.control.branch.star"
				},
				{
					"match": "(?<!\\.)\\b(?:next|break|return)\\b(?!')",
					"name": "keyword.control.transfer.star"
				},
				{
					"match": "(?<!\\.)\\bwhile\\b(?!')",
					"name": "keyword.control.loop.star"
				},
				{
					"begin": "(?<!\\.)\\bfor\\b(?![A-Z'])",
					"beginCaptures": [
						{
							"name": "keyword.control.loop.star"
						}
					],
					"end": "^",
					"patterns": [
						{
							"match": "\\b(in|from|after|(?:up|down)?to|by|while)(:)",
							"captures": {
								"1": {
									"name": "entity.name.function.label.star"
								},
								"2": {
									"name": "punctuation.separator.label.star"
								}
							}
						},
						{
							"include": "#expressions"
						}
					]
				},
				{
					"match": "(?<!\\.)\\b(?:catch|throw|try)\\b(?!')",
					"name": "keyword.control.exception.star"
				},
				{
					"match": "(?<!\\.)\\bdo\\b(?!')",
					"name": "keyword.control.exception.star"
				},
				{
					"match": "(?:(?<=\\.{3})|(?<!\\.))\\b(my)\\s+([a-z_][\\w']*)(?:(?<=')|\\b)",
					"captures": {
						"1": {
							"name": "keyword.var-decl.star"
						},
						"2": {
							"name": "variable.star"
						}
					}
				},
				{
					"include": "#attributes"
				},
				{
					"match": "(?<!\\.)\\b(has)\\s+([a-z_][\\w']*)",
					"captures": {
						"1": {
							"name": "keyword.case.star"
						},
						"2": {
							"name": "constant.language.star"
						}
					}
				},
				{
					"match": "(?<!\\.)\\bmy\\b(?!')",
					"name": "keyword.variable-declaration.star"
				},
				{
					"match": "(?<!\\.)\\bhas\\b(?!')",
					"name": "keyword.case.star"
				},
				{
					"match": "(?<!\\.)\\bthis\\b(?!')",
					"name": "variable.language.star"
				},
				{
					"match": "(?<!\\.)\\bof\\b(?!')",
					"name": "keyword.other.star"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"include": "#boolean"
				},
				{
					"include": "#numeric"
				},
				{
					"include": "#char"
				},
				{
					"include": "#string"
				},
				{
					"match": "#[a-z_]\\w*",
					"name": "variable.tag"
				},
				{
					"match": "@[a-z_]\\w*",
					"name": "variable.other"
				},
				{
					"match": "`[^`]+`",
					"name": "constant.other.symbol"
				}
			],
			"repository": {
				"boolean": {
					"match": "\\b(?:true|false)\\b(?!')",
					"name": "constant.language.boolean.star"
				},
				"numeric": {
					"patterns": [
						{
							"match": "(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)?\\b(?!\\.\\d)",
							"name": "constant.numeric.star"
						},
						{
							"match": "(?:\\B-|\\b)0x\\h+\\b",
							"name": "constant.numeric.hexadecimal.star"
						},
						{
							"match": "(?:\\B-|\\b)\\d[\\w\\.]*",
							"name": "invalid.illegal.star"
						}
					]
				},
				"escapes": {
					"patterns": [
						{
							"match": "\\\\[\"\\\\0nrtvfeab]",
							"name": "constant.character.escape.star"
						},
						{
							"match": "\\\\u\\h{4}",
							"name": "constant.character.escape.unicode.star"
						},
						{
							"match": "\\\\x\\h{2}",
							"name": "constant.character.escape.hexadecimal.star"
						},
						{
							"match": "\\\\o[0-7]{3}",
							"name": "constant.character.escape.octal.star"
						}
					]
				},
				"char": {
					"begin": "#\"",
					"beginCaptures": [
						{
							"name": "string.character.begin.star"
						}
					],
					"end": "\"",
					"endCaptures": [
						{
							"name": "string.character.end.star"
						}
					],
					"patterns": [
						{
							"include": "#escapes"
						},
						{
							"match": "\\\\.",
							"name": "invalid.illegal.star"
						},
						{
							"match": "[^\"\\\\]",
							"name": "string.character.star"
						}
					]
				},
				"string": {
					"patterns": [
						{
							"begin": "\"",
							"beginCaptures": [
								{
									"name": "punctuation.definition.string.begin.star"
								}
							],
							"end": "\"",
							"endCaptures": [
								{
									"name": "punctuation.definition.string.end.star"
								}
							],
							"name": "string.quoted.double.star",
							"patterns": [
								{
									"include": "#string-guts"
								}
							]
						}
					],
					"repository": {
						"string-guts": {
							"patterns": [
								{
									"include": "#escapes"
								},
								{
									"begin": "\\\\\\(",
									"beginCaptures": [
										{
											"name": "punctuation.section.embedded.begin.star"
										}
									],
									"end": "\\)",
									"endCaptures": [
										{
											"name": "punctuation.section.embedded.end.star"
										}
									],
									"name": "meta.template.expression.star",
									"patterns": [
										{
											"include": "#expressions"
										}
									]
								},
								{
									"match": "\\\\.",
									"name": "invalid.illegal.star"
								}
							]
						}
					}
				}
			}
		},
		"operators": {
			"patterns": [
				{
					"match": "-+>",
					"name": "keyword.operator.cascade"
				},
				{
					"match": "\\+\\+|\\-\\-",
					"name": "keyword.operator.arithmetic.increment-or-decrement.star"
				},
				{
					"match": "[+\\-]",
					"name": "keyword.operator.arithmetic.unary.star"
				},
				{
					"match": "~",
					"name": "keyword.operator.bitwise.not.star"
				},
				{
					"match": "==",
					"name": "invalid.illegal.star"
				},
				{
					"match": "=(?!=)>?",
					"name": "keyword.operator.assignment.star"
				},
				{
					"match": "(\\+|\\-|\\*\\*?|//?|%%?|<<|>>|&|\\^|\\||&&|\\|\\||\\^\\^)=",
					"name": "keyword.operator.assignment.star"
				},
				{
					"match": "\\+|\\-|\\*\\*?|//?",
					"name": "keyword.operator.arithmetic.star"
				},
				{
					"match": "%%?",
					"name": "keyword.operator.arithmetic.remainder.star"
				},
				{
					"match": "[?!<>]=|<|>",
					"name": "keyword.operator.comparison.star"
				},
				{
					"match": "&&|\\|\\||\\^\\^",
					"name": "keyword.operator.logical.star"
				},
				{
					"match": "[&|^]|<<|>>",
					"name": "keyword.operator.bitwise.star"
				},
				{
					"match": "!",
					"name": "keyword.operator.logical.not.star"
				},
				{
					"match": "\\?",
					"name": "keyword.operator.logical.truthy.star"
				},
				{
					"match": "\\.{3}",
					"name": "keyword.operator.spread"
				}
			]
		},
		"attributes": {
			"match": "(?<!\\.)\\b(is)\\s+(static|hidden|readonly|friend|unordered|getter|setter|main|inline|noinherit|asm|native|flags|uncounted|strong|sealed|macro)\\b(?!')",
			"captures": {
				"1": {
					"name": "keyword.other.attribute"
				},
				"2": {
					"name": "entity.other.attribute-name"
				}
			}
		},
		"decls": {
			"patterns": [
				{
					"begin": "\\b(on|init|has)\\s*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "keyword.star"
						},
						"2": {
							"name": "punctuation.definition.parameters.begin.star"
						}
					},
					"end": "\\]",
					"endCaptures": [
						{
							"name": "punctuation.definition.parameters.end.star"
						}
					],
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "(?=[a-z_][\\w']*:)",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"begin": "\\b([a-z_][\\w']*)(:)(?:\\s*([a-z_][\\w']*))?",
									"beginCaptures": {
										"1": {
											"name": "entity.name.function.label.star"
										},
										"2": {
											"name": "punctuation.separator.label.star"
										},
										"3": {
											"name": "variable.parameter.star"
										}
									},
									"end": "(?=[,\\]]|[a-z_][\\w']*:)",
									"patterns": [
										{
											"include": "#expressions"
										}
									]
								},
								{
									"begin": "\\b[a-z_][\\w']*(?!:)",
									"beginCaptures": [
										{
											"name": "variable.parameter.star"
										}
									],
									"end": "(?=[,\\]]|[a-z_][\\w']*:)",
									"patterns": [
										{
											"include": "#expressions"
										}
									]
								},
								{
									"include": "#expressions"
								}
							]
						},
						{
							"begin": "\\b(?:[a-z][\\w']*|_[\\w']+)(?!:)",
							"beginCaptures": [
								{
									"name": "entity.name.function.label.star"
								}
							],
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#comments"
								}
							]
						},
						{
							"begin": "(?=(?:_\\.)*[A-Z])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#expressions"
								}
							]
						}
					]
				},
				{
					"begin": "\\b(operator)\\s*(`[^`]+`)\\s*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "keyword.star"
						},
						"2": {
							"name": "constant.other.symbol.star"
						},
						"3": {
							"name": "punctuation.definition.parameters.begin.star"
						}
					},
					"end": "\\]",
					"endCaptures": [
						{
							"name": "punctuation.definition.parameters.end.star"
						}
					],
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "\\b(?:[a-z][\\w']*|_[\\w']+)(?!:)",
							"beginCaptures": [
								{
									"name": "variable.parameter.star"
								}
							],
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#expressions"
								}
							]
						}
					]
				},
				{
					"begin": "(?<!\\.)\\b(class|kind|category|protocol|type|alias|module)\\b(?!')",
					"beginCaptures": [
						{
							"name": "keyword.decl.star"
						}
					],
					"end": "$",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#types"
						},
						{
							"match": "\\bfor\\b(?!')",
							"name": "keyword.star"
						},
						{
							"include": "#attributes"
						},
						{
							"include": "#decl-block"
						},
						{
							"include": "#expressions"
						}
					]
				},
				{
					"match": "(?<!\\.)\\b(class|kind|category|protocol|type|alias|module)\\b(?!')",
					"name": "keyword.decl.star"
				},
				{
					"match": "(?<!\\.)\\b(?:on|init|deinit|operator)\\b(?!')",
					"name": "keyword.routine.star"
				},
				{
					"begin": "(?<!\\.)\\buse\\b(?!')",
					"beginCaptures": [
						{
							"name": "keyword.statement.use.star"
						}
					],
					"end": "^",
					"patterns": [
						{
							"match": "\\b(from)(:)",
							"captures": {
								"1": {
									"name": "entity.name.function.label.star"
								},
								"2": {
									"name": "punctuation.separator.label.star"
								}
							}
						},
						{
							"include": "#expressions"
						}
					]
				},
				{
					"include": "#expressions"
				}
			]
		}
	}
}