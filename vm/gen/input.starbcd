types {
	Star.Value
	Star.MultiKind
	Star.Void
	Star.Bool
	Star.Int8
	Star.Int16
	Star.Int32
	Star.Int64
	Star.UInt8
	Star.UInt16
	Star.UInt32
	Star.UInt64
	Star.Float32
	Star.Float64
	Star.Dec64
	Star.Char
	Star.Str
	Star.Ptr
	Star.Iterable1
	Star.Iterable2
	Star.Iterator1
	Star.Iterator2
	Star.Func0
	Star.Func1
	Star.Func2
	Star.Func3
}

protocol 1 Star.Value {
	single-inits {
		init 1 [new] {
			this
			throw ""
		}
	}
	
	inst-single-methods {
		on 1 [new] (this) {
			this
			native value_new
			ret
		}
	}
	
	inst-cast-methods {
		on 1 [decl#2] (decl#2) {
			this
			native cast_value_str
			ret
		}
	}
	
	binary-methods {
		operator 1 `?=` [
			1 (this)
		] (decl#3) {
			this
			get-local 1
			native value_eq
			ret
		}
		
		operator 2 `!=` [
			1 (this)
		] (decl#3) {
			this
			get-local 1
			native value_eq
			native bool_not
			ret
		}
	}

	unary-methods {
		operator 1 `?` (decl#3) {
			true
			ret
		}
	}
}

protocol 2 Star.MultiKind {
	binary-methods {
		operator 3 `&` [
			1 (this)
		] (decl#3) {
			this
			get-local 1
			native multikind_has
			ret
		}
		
		operator 4 `|` [
			1 (this)
		] (this) {
			this
			get-local 1
			native multikind_include
			ret
		}
		
		operator 5 `^` [
			1 (this)
		] (this) {
			this
			get-local 1
			native multikind_exclude
			ret
		}
	}

	unary-methods {
		operator 1 `?` (decl#3) {
			this
			native multikind_truthy
			ret
		}
	}
}

class 3 Star.Void {

}

class 4 Star.Bool {

}

class 5 Star.Int8 {

}

class 6 Star.Int16 {

}

class 7 Star.Int32 {
	inst-multi-methods {
		on 1 [
			gcd: 1 (this)
		] (this) {
			new-local
			this
			native i32_abs
			set-local 2
			new-local
			get-local 1
			native i32_abs
			set-local 3
			new-local
			int32 0
			set-local 4
			get-local 2
			int32 0
			native i32_eq
			if {
				get-local 3
				ret
			}
			get-local 3
			int32 0
			native i32_eq
			if {
				get-local 2
				ret
			}
			loop 1 {
				get-local 2
				get-local 3
				native i32_or
				int32 2
				native i32_mod0
				if {
					get-local 4
					native i32_succ
					set-local 4
					get-local 2
					int32 1
					native i32_shr
					set-local 2
					get-local 3
					int32 1
					native i32_shr
					set-local 3
				} else {
					break 1
				}
			}
			loop 1 {
				get-local 2
				int32 2
				native i32_mod0
				if {
					get-local 2
					int32 1
					native i32_shr
					set-local 2
				} else {
					break 1
				}
			}
			loop 1 {
				loop 2 {
					get-local 3
					int32 2
					native i32_mod0
					if {
						get-local 3
						int32 1
						native i32_shr
						set-local 3
					} else {
						break 2
					}
				}
				get-local 2
				get-local 3
				native i32_gt
				if {
					get-local 3
					get-local 2
					set-local 3
					set-local 2
				}
			} then {
				get-local 3
				get-local 2
				native i32_sub
				tee-local 3
				int32 0
				native i32_gt
				ifnot {
					break 1
				}
			}
			get-local 2
			get-local 4
			native i32_shl
			ret
		}
	}
}

class 8 Star.Int64 {

}

class 9 Star.UInt8 {

}

class 10 Star.UInt16 {

}

class 11 Star.UInt32 {

}

class 12 Star.UInt64 {

}

class 13 Star.Float32 {

}

class 14 Star.Float64 {

}

class 15 Star.Dec64 {

}

class 16 Star.Char {

}

class 17 Star.Str {
	inst-members {
		my 1 buffer (inst#18{
			dvar#1 => decl#16
		})
		
		my 2 length (decl#7)
		
		my 3 capacity (decl#7)
	}

	single-inits {
		init 1 [new] {
			send-ss inst#18{
				dvar#1 => decl#16
			} 1
			set-field 1
			int32 0
			tee-field 3
			set-field 2
		}
	}
	
	multi-inits {
		init 1 [
			new: 1 (decl#7)
		] {
			get-local 1
			new-ptr decl#16
			set-field 1
			int32 0
			set-field 2
			this
			get-local 1
			set-field 3
		}
	}
}

class 18 Star.Ptr typevars {
	type 1 T
} {
	static-single-methods {
		on 1 [new] (this) {
			int32 0
			new-ptr dvar#1
			ret
		}
	}
	
	static-multi-methods {
		on 1 [
			pointTo: 1 (dvar#1)
		] (this) {
			int32 1
			new-ptr dvar#1
			dup
			get-local 1
			native ptr_set_deref
			ret
		}
	}

	multi-inits {
		init 1 [
			new: 1 (decl#5)
		] {
			get-local 1
			new-ptr dvar#1
			ret
		}
	}
}

protocol 19 Star.Iterable1 {

}

protocol 20 Star.Iterable2 {

}

protocol 21 Star.Iterator1 {

}

protocol 22 Star.Iterator2 {

}

protocol 23 Star.Func0 {

}

protocol 24 Star.Func1 {

}

protocol 25 Star.Func2 {

}

protocol 26 Star.Func3 {

}

module 27 Main is main 1 {
	static-single-methods {
		on 1 [main] (decl#2) {
			str "Hello, world!"
			native debug_print
			
			int32 1
			int32 2
			native i32_add
			native debug_print

			int32 5
			int32 10
			send-im decl#28 1
			new-local
			set-local 1

			get-local 1
			native debug_print

			int32 5
			int32 4
			send-im decl#28 1
			native debug_print

			get-local 1
			int32 5
			int32 10
			send-im decl#28 1
			send-bo decl#1 1
			native debug_print

			str "abc"
			new-local
			set-local 2

			get-local 2
			dup
			get-member 1
			new-local
			set-local 3
			dup
			get-member 2
			new-local
			set-local 4
			pop
			int32 0
			new-local
			set-local 5
			loop 1 {
				get-local 5
				get-local 4
				native i32_lt
				ifnot {
					break 1
				}

				get-local 3
				get-local 5
				native ptr_get_at
				new-local
				set-local 6

				get-local 6
				native debug_print
			} then {
				get-local 5
				native i32_succ
				set-local 5
			}

			int32 0
			set-local 5
			loop 1 {
				get-local 5
				int32 7
				native i32_le
				ifnot {
					break 1
				}
				
				get-local 5
				send-ms this 1
				native debug_print 
			} then {
				get-local 5
				native i32_succ
				set-local 5
			}

			int32 0
			set-local 5
			loop 1 {
				get-local 5
				int32 7
				native i32_le
				ifnot {
					break 1
				}
				
				get-local 5
				send-ms this 2
				native debug_print 
			} then {
				get-local 5
				native i32_succ
				set-local 5
			}

			int32 12
			int32 13
			send-mi decl#7 1
			native debug_print

			int32 12
			int32 14
			send-mi decl#7 1
			native debug_print

			int32 12
			int32 15
			send-mi decl#7 1
			native debug_print

			int32 12
			int32 16
			send-mi decl#7 1
			native debug_print

			dec64 0.1
			dec64 0.2
			native d64_add
			native debug_print
		}
	}

	static-multi-methods {
		on 1 [fact: 1 (decl#7)] (decl#7) {
			get-local 1
			int32 0
			native i32_eq
			if {
				int32 1
				ret
			} else {
				get-local 1
				get-local 1
				int32 1
				native i32_sub
				send-ms this 1
				native i32_mult
				ret
			}
		}

		on 2 [fib: 1 (decl#7)] (decl#7) {
			get-local 1
			int32 2
			native i32_lt
			if {
				get-local 1
				ret
			} else {
				get-local 1
				int32 1
				native i32_sub
				send-ms this 2
				get-local 1
				int32 2
				native i32_sub
				send-ms this 2
				native i32_add
				ret
			}
		}
	}
}

class 28 Point {
	inst-members {
		my 1 x (decl#7)
		my 2 y (decl#7)
	}

	multi-inits {
		init 1 [new: 1 (decl#7) _: 2 (decl#7)] {
			get-local 1
			set-field 1
			get-local 2
			set-field 2

			get-field 2
			get-field 1
			native i32_gt
			if {
				retvoid
			}
			get-field 1
			int32 3
			native i32_mult
			set-field 1
		}
	}
}